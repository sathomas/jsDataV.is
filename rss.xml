<?xml version="1.0" encoding="utf-8" standalone="no"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Data Visualization with JavaScript</title>
        <link>http://jsDataV.is</link>
        <description>Data Visualization with JavaScript, including the full content of the book published by No Starch Press, blog posts, examples, and presentations.</description>
        <generator>Feeder 2.5.8(1906); Mac OS X Version 10.10.1 (Build 14B25) http://reinventedsoftware.com/feeder/</generator>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <language>en</language>
        <pubDate>Tue, 20 Jan 2015 09:29:10 -0500</pubDate>
        <lastBuildDate>Tue, 20 Jan 2015 09:29:10 -0500</lastBuildDate>
        <atom:link href="http://jsDataV.is/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title>Chapter 6: Visualizing Geographic Data</title>
            <link>http://jsdatav.is/chap06.html</link>
            <description><![CDATA[<p>Humans crave context when evaluating data, so it’s important to provide that context when it’s available. In the previous chapter, we saw how timelines can provide one frame of reference; now we’ll examine another equally important context: place. If a data set includes geographic coordinates or has values that correspond to different geographic regions, you can provide geographic context using a map-based visualization. The examples in this chapter consider two types of map-based visualizations.</p>

<p>In the first two examples, we want to show how data varies by region. The resulting visualizations, known as <em>choropleth</em> maps, use color to highlight different characteristics of the different regions. For the next two examples the visualization data doesn’t itself vary by region directly, but the data does have a geographic component. By showing the data on a map, we can help our users understand it.</p>

<p>More specifically, we’ll see</p>

<ul>
<li>How to use special map fonts to create maps with minimal JavaScript.</li>
<li>How to manipulate Scalable Vector Graphic (svg) image maps with JavaScript.</li>
<li>How to use a simple mapping library to add maps to web pages.</li>
<li>How to integrate a full-featured map library into a visualization.</li>
</ul>

<p><a href="http://jsdatav.is/chap06.html">Continue Reading</a></p>]]></description>
            <pubDate>Tue, 20 Jan 2015 09:29:03 -0500</pubDate>
            <guid isPermaLink="false">61C33D8B-EDA1-478B-8EFB-641383839867</guid>
        </item>
        <item>
            <title>Chapter 5: Showing Timelines</title>
            <link>http://jsdatav.is/chap05.html</link>
            <description><![CDATA[<p>The most compelling visualizations often succeed because they tell a story; they extract a narrative from data and reveal that narrative to their users. And as with any narrative, time is a critical component. If the data consists solely of numbers, a standard bar or line chart can easily show its evolution over time. If the data is not numerical, however, standard charts probably won’t work. This chapter considers several alternatives for time-based visualizations. All are based on some variation of a timeline; one linear dimension represents time, and events are places along that dimension based on when they occurred. In all of the examples, we’ll consider the same underlying data: a possible chronology of the plays of William Shakespeare.</p>

<p>We’ll look at three very different approaches for adding timelines to web pages. One option relies on a JavaScript library, and it follows a process similar to many other visualizations in the book. The other two techniques, however, offer a different perspective. In one, we won’t use a visualization library at all. Instead, we’ll build a timeline with basic JavaScript, HTML, and CSS, and we’ll see how to do that both with and without jQuery. The final example shows the other extreme. It relies on a full-featured web component available from an external web site. In short, we’ll look at:</p>

<ul>
<li>How to use a library to create timelines.</li>
<li>How to create timelines without a library using only JavaScript, HTML, and CSS.</li>
<li>How to integrate a timeline component in a web page.</li>
</ul>

<p><a href="http://jsdatav.is/chap05.html">Continue Reading</a></p>]]></description>
            <pubDate>Tue, 13 Jan 2015 12:40:48 -0500</pubDate>
            <guid isPermaLink="false">C37C6B96-7558-4869-B96F-F550C9BCF620</guid>
        </item>
        <item>
            <title>Chapter 4: Creating Specialized Graphs</title>
            <link>http://jsdatav.is/chap04.html</link>
            <description><![CDATA[<p>The first three chapters looked at different ways to create many common types of charts with JavaScript. But if your data has unique properties, or if you want to show it in an unusual way, a more specialized chart might be more appropriate than a typical bar, line or scatter plot.</p>

<p>Fortunately, there are many JavaScript techniques and plugins to expand our visualization vocabulary beyond the standard charts. In this chapter, we’ll look at approaches for several specialized chart types, including:</p>

<ul>
<li>How to combine hierarchy and dimension with tree maps</li>
<li>How to highlight regions with heat maps</li>
<li>How to show links between elements with network graphs</li>
<li>How to reveal language patterns with word clouds</li>
</ul>

<p><a href="http://jsdatav.is/chap04.html">Continue Reading</a></p>]]></description>
            <pubDate>Mon, 05 Jan 2015 09:46:08 -0500</pubDate>
            <guid isPermaLink="false">C85A1B93-6432-469F-B997-260DCF3CB6ED</guid>
        </item>
        <item>
            <title>Chapter 3: Integrating Charts on a Page</title>
            <link>http://jsdatav.is/chap03.html</link>
            <description><![CDATA[<p>You might expect a data visualization for the web to be featured very prominently on the page, or even make up the entire web page. That’s not always the right approach, though. The best visualizations are effective because they help the user understand the data, not because they “look pretty” on the page. Some data may be straightforward enough to present without context, but meaningful data probably isn’t. And if our presentation requires context, its visualizations are likely sharing the page with other content. When we design web pages, we should take care to balance any individual component with the page as a whole. If a single visualization is not the entire story, it shouldn’t take up all (or even most) of the space on the page. It can be challenging, however, to minimize the space a traditional chart requires. There are, after all, axes, labels, titles, legends, and more to place.</p>

<p>Edward Tufte considered this problem in his groundbreaking work <a href="http://www.edwardtufte.com/tufte/books_vdqi">The Visual Display of Quantitative Information</a>, and he proposed a novel solution he called sparklines. Sparklines are charts stripped to their bare essentials, presented without the aforementioned elements we often see in a chart. Sparklines can present a lot of information in very little space, even to the point where it is possible to include a chart right in the middle of a sentence. There is no need for “See figure below” or “Click for larger view.” One of Tufte’s earliest examples presents the glucose level of a medical patient; figure 3-1 shows a reproduction.</p>

<p><a href="http://jsdatav.is/chap03.html">Continue Reading</a></p>]]></description>
            <pubDate>Fri, 02 Jan 2015 13:59:06 -0500</pubDate>
            <guid isPermaLink="false">E71D6786-6552-4BD8-B41E-244B26BFA383</guid>
        </item>
        <item>
            <title>Chapter 2: Making Charts Interactive</title>
            <link>http://jsdatav.is/chap02.html</link>
            <description><![CDATA[<p>In chapter 1 we saw how to create a wide variety of simple, static charts. In many cases such charts are the ideal visualization, but they don’t take advantage of an important characteristic of the web—interactivity. Sometimes you want to do more than just present data to your users; you want to give them a chance to explore the data, to focus on the elements they find particularly interesting, or to consider alternative scenarios. In those cases we can take advantage of the web as a medium by adding interactivity to our visualizations.</p>

<p>Because they’re designed for the web, virtually all of the libraries and toolkits we examine in this book include support for interactivity. That’s certainly true of the flotr2 library used in chapter 1. But let’s take the opportunity to explore an alternative. In this chapter, we’ll use the <a href="http://www.flotcharts.org/">Flot library</a>, which is based on jQuery, and features exceptionally strong support for interactive and real time charts.</p>

<p>For this chapter, we’re also going to stick with a single data source: the Gross Domestic Product (GDP) for countries worldwide. This data is publicly available from the <a href="http://data.worldbank.org/">World Bank</a>. It may not seem like the most exciting data to work with, but effective visualizations can bring even the most mundane data alive.</p>

<p>Here’s what you’ll learn:</p>

<ul>
<li>How to let users select the content for a chart</li>
<li>How to let users zoom into a chart to see more details</li>
<li>How to make a chart respond to user mouse movements</li>
<li>How to dynamically get data for a chart using an ajax service</li>
</ul>

<p><a href="http://jsdatav.is/chap02.html">Continue Reading</a></p>]]></description>
            <pubDate>Mon, 29 Dec 2014 11:57:49 -0500</pubDate>
            <guid isPermaLink="false">2B6C6364-F7AE-4039-AFBB-FE49CA594060</guid>
        </item>
        <item>
            <title>Chapter 1: Graphing Data</title>
            <link>http://jsdatav.is/chap01.html</link>
            <description><![CDATA[<p>Many people think of data visualization as intricate interactive graphics of dazzling complexity. Creating effective visualizations, however, doesn’t require Picasso’s artistic skill or Turing’s programming expertise. In fact, when you consider the ultimate purpose of data visualization—helping users understand data—simplicity is one of the most important features of an effective visualization. Simple, straightforward charts are often the easiest to understand. After all, users have seen hundreds or thousands of bar charts, line charts, x/y plots, and the like. They know the conventions that underlie these charts, so they can interpret a well-designed example effortlessly. If a simple, static chart presents the data best, use it. You’ll spend less effort creating your visualization, and your users will spend less effort trying to understand it.</p>

<p>There are many quality tools and libraries to help you get started with simple visualizations. With these tools, you can avoid reinventing the wheel, and you can be assured of a reasonably attractive presentation by sticking with the library defaults. We’ll look at several of these tools throughout the book, but for this chapter the we’ll use the <a href="http://www.humblesoftware.com/flotr2/">flotr2 library</a>. flotr2 makes it easy to add standard bar charts, line charts, and pie charts to any web page, and it also supports some less common chart types. We’ll take a look at all of these techniques in the examples that follow. Here’s what you’ll learn:</p>

<ul>
<li>How to create a basic bar chart</li>
<li>How to plot continuous data with a line chart</li>
<li>How to emphasize fractions with a pie chart</li>
<li>How to plot x/y data with a scatter chart</li>
<li>How to show magnitudes of x/y data with a bubble chart</li>
<li>How to display multidimensional data with a radar chart</li>
</ul>

<p><a href="http://jsdatav.is/chap01.html">Continue Reading</a></p>]]></description>
            <pubDate>Wed, 24 Dec 2014 12:56:12 -0500</pubDate>
            <guid isPermaLink="false">6DF81AC0-DBBA-4BAB-A4DA-C868915B04C7</guid>
        </item>
        <item>
            <title>Introducing Data Visualization with JavaScript</title>
            <link>http://jsDataV.is/intro.html</link>
            <description><![CDATA[<p>It’s getting hard to ignore the importance of data in our lives. Data is critical to the largest social organizations in human history. It can affect even the least consequential of our everyday decisions. And its collection has widespread geopolitical implications. Yet it also seems to be getting easier to ignore the data itself. One estimate suggests that 99.5% of the data our systems collect goes to waste. No one ever analyzes it effectively.</p>

<p>Data visualization is a tool that addresses this gap.</p>

<p><a href="http://jsDataV.is/intro.html">Continue Reading</a></p>]]></description>
            <pubDate>Sat, 13 Dec 2014 15:58:48 -0500</pubDate>
            <guid isPermaLink="false">994ADB90-BB9B-4DCC-8FDE-46BAF42D636B</guid>
        </item>
    </channel>
</rss>